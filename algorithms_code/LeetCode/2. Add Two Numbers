题目：
给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 ：：数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
示例：
输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807


1.C++
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *dummy = new ListNode(-1), *cur = dummy;  //初始化储存结果链表节点dummy及中间节点
        int carry = 0;  //定义初始进位为0
        while (l1 || l2) {
            int val1 = l1 ? l1->val : 0;
            int val2 = l2 ? l2->val : 0;
            int sum = val1 + val2 + carry;
            carry = sum / 10;
            cur->next = new ListNode(sum % 10);
            cur = cur->next;
            if (l1) l1 = l1->next;
            if (l2) l2 = l2->next;
        }
        if (carry) cur->next = new ListNode(carry); //高位的进位处理
        return dummy->next;
    }
};


2. Python3

class Solution:
    def addTwoNumbers(self,l1:ListNode,L2:ListNode) -> ListNode:
        result = ListNode(0)
        result_tail = result
        carry = 0
        while l1 or l2 or carry:
            v1 = l1.val if l1 else 0
            v2 = l2.val if l2 else 0
            num = v1+v2+carry
            carry = num//10
            out = num%10
            result_tail.next = ListNode(out)
            result_tail = result_tail.next
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        return result.next
        
        
