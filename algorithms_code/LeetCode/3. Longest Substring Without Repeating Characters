题目：
给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:
输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。

示例 2:
输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。

示例 3:
输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

1.C++

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int res=0; //定义初始最长子串长度为0；
        int left = -1; //定义最长子串最左边字符起始位置为-1
        int len = s.size(); //s字符串长度
        
        map<int,int> m;   //定义个map,储存字符串每个字符与最后出现的位置的之间的映射
    
        for（int i=0 ; i<len; ++i）{
         
            if(m.count(s[i])  &&  m[s[i]]>left ){  // 如果是s[i]在m中且m[s[i]]在大于eft
                                                   // 即是s[i]对应的字符出现在res中且在left右边
                 left = m[s[i]];   // 更新left
             }
            m[s[i]]=i;
            res = max(res,i-left);        
        }
     return res;
    }
}

2.python3

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
         dict = {}
         length = 0
         left = -1
         for index,string in enumerate(s):
             if (string in dict) and (dict[string]>=left:
                  left = dict[string]+1
                  lth = index - left
                  len = lth if lth>length else length
             dict[string]=index
          lth = len(s)-left
          length = lth if lth>length else length
          return length
                  
             
       







